#include <bits/stdc++.h>
using namespace std;
#define mx 100005
#define fs first
#define sc second
#define MOD 1000000007
#define ll long long
multiset<int> tree[mx*4];
int ara[mx];
int f = 0;
void update(int node, int b, int e, int idx, int val)
{
    if(e < idx || idx < b) return;
    if(f) tree[node].erase(tree[node].find(ara[idx]));
    tree[node].insert(val);
    if(idx <= b && e <= idx) return;
    int lson = node * 2, rson = lson + 1, mid = (b+e)/2;
    update(lson, b, mid, idx, val);
    update(rson, mid+1, e, idx, val);
}
 
ll query(int node, int b, int e, int i, int j, int val)
{
//    cout << b << " " << e << endl;
    if(e < i || j < b) return 0;
    if(i <= b && e <= j) {
        ll ans = 0;
        auto it = tree[node].upper_bound(val);
        if(it != tree[node].end()) ans = 1ll * (*it - ara[i]) * (ara[j] - *it);
        if(it != tree[node].begin())
        {
            it--;
            ans = max(ans, 1ll * (*it - ara[i]) * (ara[j] - *it));
        }
 
//        cout << b << " - " << e << " " << ans << endl;
        return ans;
    }
    int lson = node * 2, rson = lson + 1, mid = (b+e)/2;
    ll x = query(lson, b, mid, i, j, val);
    ll y = query(rson, mid+1, e, i, j, val);
    return max(x, y);
}
 
int main()
{
    int t;
    scanf("%d", &t);
    while(t--)
    {
        int n, q;
        scanf("%d %d", &n, &q);
        f = 0;
        for(int i = 1; i<=n; i++)
        {
            scanf("%d", &ara[i]);
            update(1, 1, n, i, ara[i]);
        }
        f = 1;
 
        while(q--)
        {
            int sig, l, r;
            scanf("%d %d %d", &sig, &l, &r);
            if(sig==1){
                printf("%lld\n", query(1, 1, n, l, r, (ara[l] + ara[r])/2));
            }
            else update(1, 1, n, l, r), ara[l] = r;
        }
        for(int i = 1; i<= n* 4; i++) tree[i].clear();
 
    }
    return 0;
}